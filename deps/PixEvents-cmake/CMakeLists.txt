
project(PixEvents)

file(GLOB_RECURSE DECODER_SRC "PixEvents/decoder/*.cpp" "PixEvents/decoder/*.h") 
add_library(PixDecoder ${DECODER_SRC})
target_compile_features(PixDecoder PUBLIC cxx_std_17)
target_include_directories(PixDecoder PUBLIC 
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/include"
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/"
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/decoder/include/"
)
target_compile_definitions(PixDecoder PRIVATE NOMINMAX)

set(WIL_BUILD_TESTS OFF)
set(WIL_BUILD_PACKAGING OFF)
add_subdirectory(PixEvents/third_party/wil)

# PIXETW is generated by mc.exe. We need to manually account for this.
# This command generates an identical PIXETW as the official visual studio solution.
set(ETW_PATH "${CMAKE_CURRENT_BINARY_DIR}/PIXETW.h")
set(ETW_INPUT "${CMAKE_CURRENT_LIST_DIR}/PixEvents/runtime/lib/PIXETW.man")
add_custom_command(
	PRE_BUILD 
	OUTPUT "${ETW_PATH}"
	DEPENDS "${ETW_INPUT}"
	WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
	COMMAND "mc.exe" -um "${ETW_INPUT}"
)
add_custom_target(WinPixEventRuntime_ETW DEPENDS "${ETW_PATH}")

file(GLOB_RECURSE RUNTIME_SRC "PixEvents/runtime/lib/*.cpp" "PixEvents/runtime/dll/*.cpp" "PixEvents/runtime/lib/*.h") 
add_library(WinPixEventRuntime SHARED)
target_sources(WinPixEventRuntime PRIVATE ${RUNTIME_SRC})
target_compile_features(WinPixEventRuntime PUBLIC cxx_std_17)
target_include_directories(WinPixEventRuntime PUBLIC 
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/include"
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/"
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/runtime/include/"
	"${CMAKE_CURRENT_LIST_DIR}/PixEvents/runtime/"
	"${CMAKE_CURRENT_BINARY_DIR}"
)
target_precompile_headers(WinPixEventRuntime PRIVATE "PixEvents/runtime/lib/pch.h")	# without this, it doesn't compile
target_compile_definitions(WinPixEventRuntime PRIVATE DBG)	# this is on all the time??
add_dependencies(WinPixEventRuntime WinPixEventRuntime_ETW)
target_link_libraries(WinPixEventRuntime PUBLIC PixDecoder WIL)
set_target_properties(WinPixEventRuntime PROPERTIES WINDOWS_EXPORT_ALL_SYMBOLS ON)
